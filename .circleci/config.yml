version: 2.1
orbs:
  node: circleci/node@4.1.0
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-cicd-<< parameters.workflow_id >> --recursive
            aws s3 rb s3://udapeople-cicd-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name cicd-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name cicd-frontend-<< parameters.workflow_id >>

  write-envvars-file:
    description: Command used for creating env file
    steps:
      - run:
          name: Add env vars to env file
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: abf60a14-7218-45d6-a980-3dc41980c676" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
              exit 1
            fi
            
jobs:
  build-frontend:
    executor:
      name: node/default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor:
      name: node/default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor:
      name: node/default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    executor:
      name: node/default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm i
            npm run test
 
            
  scan-frontend:
    executor:
      name: node/default
    steps:
        - checkout
        - run:
            name: Audit Frontend
            command: |
              cd frontend
              npm i
              npm audit --audit-level=critical

  scan-backend:
    executor:
      name: node/default
    steps:
        - checkout
        - run:
            name: Audit Backend
            command: |
              cd backend
              npm i
              npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install the tar package for the workspace step 
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=cicd-backend \
              --stack-name cicd-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="cicd-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=cicd-frontend \
              --stack-name cicd-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="cicd-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:project,Values=cicd-backend" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: 'python:3.7-alpine3.11'
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'fb:a3:5b:f1:1f:f7:92:81:4a:61:8f:de:e2:d0:98:85'
      - attach_workspace:
          at: ~/    
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - write-envvars-file 
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    executor:
      name: node/default
    steps:
      - checkout
      - run:
          name: Run migrations
          no_output_timeout: 30m
          command: |
            cd backend
            npm i
            npm run migrations | tee migrations_result.txt
            if cat migrations_result.txt | grep "has been executed successfully" ; then
              curl -H "Content-Type: text/plain" -H "token: abf60a14-7218-45d6-a980-3dc41980c676" \
                          --request PUT --data "1" \
                          https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0-7}
            else
              curl -H "Content-Type: text/plain" -H "token: abf60a14-7218-45d6-a980-3dc41980c676" \
                          --request PUT --data "0" \
                          https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0-7}
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url and build frontend to have updated API_URL
          command: |
            BACKEND_IP=`sed -n 2p ~/project/.circleci/ansible/inventory.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            aws s3 sync dist s3://udapeople-cicd-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
                    
  deploy-backend:
    docker:
      - image: 'python:3.7-alpine3.11'
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'fb:a3:5b:f1:1f:f7:92:81:4a:61:8f:de:e2:d0:98:85'
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - write-envvars-file
      - run:
          name: cleanup backend folder and create tar
          command: |
            cd backend
            rm -rf node_modules 
            rm -rf dist
            rm -rf test
            rm README.md
            cd ..  
            tar cvzf backend.tar.gz backend
            ls
      - run:
          name: Preparing and Deploy backend
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - write-envvars-file
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          no_output_timeout: 30m
          command: |
            BACKEND_IP=`sed -n 2p ~/project/.circleci/ansible/inventory.txt`
            echo "${BACKEND_IP}"
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL=http://udapeople-cicd-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/index.html#/employees
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl ansible nodejs npm
            pip install awscli
      - run:
          name: cloudfront distribution update
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name cicd-cloudfront-temp \
              --parameter-overrides WorkflowID="cicd-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=cicd-cloudfront-temp
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
